var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _toArray = function (arr) { return Array.isArray(arr) ? arr : Array.from(arr); };

document.addEventListener("DOMContentLoaded", init);

var zoom = 10;
var lastPPM = { width: 0, height: 0, pixels: [] };

function init() {
  var dropArea = window;

  // PreventDefault to prevent the browser from capturing the drop
  // event (and ask to save the PPM file or open it with the default
  // viewer).
  dropArea.addEventListener("dragenter", function (e) {
    e.preventDefault();
  });
  dropArea.addEventListener("dragover", function (e) {
    e.preventDefault();
  });
  dropArea.addEventListener("drop", function (e) {
    e.preventDefault();

    var file = e.dataTransfer.files[0];
    if (file == null) return error("No file was dropped");

    var reader = new FileReader();
    reader.onload = function () {
      lastPPM = parse(reader.result);
      display(lastPPM);
    };
    reader.onerror = error;
    reader.readAsText(file);
  });

  var $zoom = document.getElementById("zoom");
  $zoom.addEventListener("input", function (e) {
    zoom = $zoom.value;
    display(lastPPM);
  });

  // Get zoom value from DOM.  The browser can save the set value from
  // a previous session, so itâ€™s not always set to the default value.
  zoom = $zoom.value;
}

function error(e) {
  console.error(e);
}

// PPM String -> PPM object
function parse(ppmString) {
  // Remove lines comment lines beginning with '#', then rejoin.
  var lines = ppmString.split("\n").filter(function (l) {
    return !l.startsWith("#");
  }).join("\n");

  var whitespace = /[ \t\r\n]+/;
  var fields = lines.split(whitespace);

  var _fields = _toArray(fields);

  var magic = _fields[0];
  var width = _fields[1];
  var height = _fields[2];
  var maxVal = _fields[3];

  var pixelData = _fields.slice(4);

  if (magic !== "P3") return error("Expected 'P3' magic number at the beginning of the file, got " + magic);

  width = parseInt(width, 10);
  if (isNaN(width)) return error("Expected a decimal value for width, got " + width);

  height = parseInt(height, 10);
  if (isNaN(height)) return error("Expected a decimal value for height, got " + height);

  maxVal = parseInt(maxVal, 10);
  if (isNaN(maxVal) || maxVal < 0 || maxVal >= 65536) return error("Expected a positive decimal less than 65536 for maximum color value, got " + maxVal);

  var pixels = [];
  var idx, r, g, b;
  for (var y = 0; y < height; ++y) {
    for (var x = 0; x < width; ++x) {
      idx = 3 * (y * width + x);

      r = parseInt(pixelData[idx]);
      if (isNaN(r)) return error("Expected a decimal value for red component, got " + r);
      g = parseInt(pixelData[idx + 1]);
      if (isNaN(g)) return error("Expected a decimal value for green component, got " + g);
      b = parseInt(pixelData[idx + 2]);
      if (isNaN(b)) return error("Expected a decimal value for blue component, got " + b);

      pixels.push([r, g, b].map(function (p) {
        return p / maxVal;
      }));
    }
  }

  return { width: width, height: height, pixels: pixels };
}

// Display PPM object to canvas
function display(ppm) {
  var $canvas = document.getElementById("display");
  var c = $canvas.getContext("2d");
  $canvas.width = zoom * ppm.width;
  $canvas.height = zoom * ppm.height;
  c.scale(zoom, zoom);

  var idx, r, g, b;
  for (var y = 0; y < ppm.height; ++y) for (var x = 0; x < ppm.width; ++x) {
    idx = y * ppm.width + x;
    var _ref = ppm.pixels[idx].map(function (p) {
      return Math.floor(p * 255);
    });

    var _ref2 = _slicedToArray(_ref, 3);

    r = _ref2[0];
    g = _ref2[1];
    b = _ref2[2];

    c.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
    c.fillRect(x, y, 1, 1);
  }
}

//# sourceMappingURL=data:application/json;base64,